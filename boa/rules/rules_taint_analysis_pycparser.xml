<?xml version="1.0" encoding="UTF-8"?>

<boa_rules>
    <parser>
        <name>pycparser</name>
        <lang_objective>C</lang_objective>
        <module_name>boapm_pycparser</module_name>
        <class_name>BOAPMPycparser</class_name>
        <callback>
            <method name="ast" callback="get_ast" />
        </callback>
        <env_vars>
            <env_var>PYCPARSER_FAKE_LIBC_INCLUDE_PATH</env_var>
        </env_vars>
    </parser>
    <modules>
        <module>
            <module_name>boam_cfg</module_name>
            <class_name>BOAModuleControlFlowGraph</class_name>
            <lifecycle_handler>boalc_pycparser_ast.BOALCPycparserAST</lifecycle_handler>
            <args>
                <!-- Check the CFG rules file in order to know which args accepts -->
                <dict>
                    <!-- It makes easier to apply Taint Analysis to a single function
                            if there are not references to other functions -->
                    <element name="propagate_func_call" value="false" />
                </dict>
            </args>
        </module>
        <module>
            <module_name>boam_taint_analysis</module_name>
            <class_name>BOAModuleTaintAnalysis</class_name>
            <!-- The default lifecycle is the one we are going to use -->
            <!--<lifecycle_handler>boalc_pycparser_ast.BOALCPycparserAST</lifecycle_handler>-->
            <args>
                <dict>
                    <list name="sources">
                        <!-- Check the Source class documentation in order to know what a
                             Source means in Taint Analysis terminology -->
                        <!--
                            format: name@type@function@how@affected@if_tainted
                            **************************************************
                            name: name of the object which is a Source
                            type: type of the Source (check for allowed types in the TA module)
                            function (optional): function which contains the Source (if
                                                 specified, other functions will not be
                                                 affected unless you specify other rules)
                            how (optional): it specifies how affects the source to other
                                variables (check for allowed types in the TA module)
                            affected (optional): it specifies the position of the affected
                                argument, or even variable assignation. The value '0' means
                                variable assignation, '1' the first parameter, ...
                                If you use this argument, *how* has to have value.
                            if_tainted (optional): it specifies the position of an argument
                                which, if tainted, the position of *affected* (above parameter
                                position) parameter will be affected, but if not, will not be
                                affected. Is a condition for *affected* argument. The value
                                '1' means the first parameter, ... If you use this argument,
                                *how* has to have value.
                        -->
                        <element value="argc@variable@main" />
                        <element value="argv@variable@main" />
                        <!-- var1 = gets(var2); -> var1 and var2 are affected -->
                        <element value="gets@function@@argument@0" />   <!-- var1 -->
                        <element value="gets@function@@argument@1" />   <!-- var2 -->
                        <!-- strcpy(not_tainted, tainted); -> "not_tainted" is affected by
                                                              "tainted" -->
                        <element value="strcpy@function@@targ@1@2" />
                    </list>
                    <list name="sinks">
                        <!-- Check the Sink class documentation in order to know what a Sink
                             means in Taint Analysis terminology -->
                        <!--
                            format: function_name@dangerous_parameter
                            *****************************************
                            function_name: name of the function which is a Sink
                            dangerous_parameter: position of the dangerous parameter
                                of the Sink (0 for all parameters or None if has no
                                parameters). The value '1' means first parameter.
                        -->
                        <element value="strcpy@2" />
                        <element value="system@0" />
                        <!-- <element value="system@1" />  would have the same effect because
                                                           system() only accepts 1 parameter -->
                        <element value="strncpy@3" />
                    </list>

                    <!-- For displaying information about the tainted variables
                            of all functions. If you only want to get the relevant
                            information, set this option to false or remove it.
                            The default value is "true". The allowed values are
                            "true" and "false". -->
                    <element name="append_tainted_variables_to_report" value="true" />
                </dict>
            </args>
            <dependencies>
                <dependency>
                    <!-- We need the CFG in order to execute the Taint Analysis module -->

                    <module_name>boam_cfg</module_name> 
                    <class_name>BOAModuleControlFlowGraph</class_name>
                    <callback> 
                        <method name="cfg" callback="get_basic_cfg" />
                    </callback>
                </dependency>
            </dependencies>
        </module>
    </modules>
    <report>
        <args>
            <!-- Empty -->
        </args>
    </report>
</boa_rules>