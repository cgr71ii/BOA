<?xml version="1.0" encoding="UTF-8"?>

<boa_rules analysis="dynamic">
    <env_vars>
        <env_var mandatory="true">PIN_BIN</env_var>
        <env_var value="10000">BC_LINE_LENGTH</env_var> <!-- Avoid line breaks with /usr/bin/bc -->
    </env_vars>
    <runners>
        <inputs>
            <module_name>boaim_input_seed</module_name>
            <class_name>BOAIMInputSeed</class_name>
            <args>
                <dict>
                    <element name="random_max_length" value="30" />
                    <element name="random_likelihood" value="0.005" />
                    <!-- <element name="max_random_inputs" value="1000" /> -->
                    <list name="input_seed">
                        <element value="boa:base64_encoded:" />
                    </list>
                </dict>
            </args>
        </inputs>
        <fails>
            <module_name>boafm_exit_status</module_name>
            <class_name>BOAFMExitStatus</class_name>
            <args>
                <dict>
                </dict>
            </args>
        </fails>
    </runners>
    <modules>
        <module>
            <module_name>boam_basic_fuzzing</module_name>
            <class_name>BOAModuleBasicFuzzing</class_name>
            <severity_enum>severity_fuzzing.SeverityFuzzing</severity_enum>
            <lifecycle_handler>boalc_basic.BOALCBasic</lifecycle_handler>
            <args>
                <dict>
                    <element name="iterations" value="100" />
                    <element name="pipe" value="true" />
                    <element name="log_args_and_input_and_output" value="false" />
                    <element name="pintool" value="obj-intel64/branch_coverage_numeric_hash.so" />
                    <element name="subprocess_shell" value="false" />
                    <element name="processes" value="5" />
                    <element name="skip_process" value="true" />
                    <element name="sandboxing_command" value="" />  <!-- https://github.com/netblue30/firejail/issues/4474 -->
                    <element name="add_input_to_report" value="false" />
                </dict>
            </args>
        </module>
        <module>
            <module_name>boam_genalg_fuzzing</module_name>
            <class_name>BOAModuleGenAlgFuzzing</class_name>
            <severity_enum>severity_fuzzing.SeverityFuzzing</severity_enum>
            <lifecycle_handler>boalc_without_automatic_reporting.BOALCWithoutAutomaticReporting</lifecycle_handler>
            <args>
                <dict>
                    <element name="epochs" value="5000" />
                    <element name="elitism" value="2" />
                    <element name="mutation_rate" value="0.2" />
                    <element name="crossover_rate" value="0.95" />
                    <!-- <element name="mutation_regex" value="^[0-9]|[a-z]|[A-Z]|=$" /> -->
                    <element name="mutation_binary_granularity" value="true" />
                    <element name="add_input_to_report" value="false" />
                    <element name="elements_from_input_module_new_population" value="20" />
                    <element name="print_threats_while_running" value="true" />
                    <element name="power_schedule" value="fast" />
                    <element name="power_schedule_beta" value="1.0" />
                </dict>
            </args>

            <dependencies>
                <dependency>
                    <module_name>boam_basic_fuzzing</module_name>
                    <class_name>BOAModuleBasicFuzzing</class_name>
                    <callback>
                        <method name="instance" callback="get_instance" />
                    </callback>
                </dependency>
            </dependencies>
        </module>
    </modules>
    <report>
        <!--
        <module_name></module_name>
        <class_name></class_name>
        -->
        <args>
            <dict>
            </dict>
        </args>
    </report>
</boa_rules>
