<?xml version="1.0" encoding="UTF-8"?>

<boa_rules> <!-- Mandatory -->
    <parser>    <!-- Mandatory -->
        <name>pycparser</name>  <!-- Mandatory -->
        <lang_objective>C</lang_objective>  <!-- Mandatory -->
        <module_name>module name in "parser_modules" directory</module_name>    <!-- Mandatory -->
        <class_name>class name in the module</class_name>   <!-- Mandatory -->
        <callback>  <!-- Mandatory -->
            <method name="ast" callback="get_ast" />    <!-- Mandatory: at least 1; Mandatory 'name' and 'callback' attributes -->
            <method name="cfg" callback="get_cfg" />
        </callback>
        <env_vars>  <!-- Mandatory -->
            <env_var>ENV_VAR_1</env_var> <!-- Optional -->
            <env_var>ENV_VAR_N</env_var>
        </env_vars>
    </parser>
    <modules>   <!-- Mandatory -->
        <module>    <!-- Mandatory: at least 1 -->
            <module_name>module name in "modules" directory</module_name>   <!-- Mandatory -->
            <class_name>class name in the module</class_name>   <!-- Mandatory -->
            <severity_enum></severity_enum> <!-- Optional
                                                 Default value: severity_syslog.SeveritySyslog
                                                 Allowed values: "module name from 
                                                    /path/to/BOA/enumerations/severity"."class name"
                                                 Other values: default value
                                                 It allows the user to select a different way to
                                                    show and sort the found threats through an
                                                    enumeration defined by the own user. The enumeration
                                                    has to inheritance from /path/to/BOA/enumerations
                                                    /severity/severity_base.SeverityBase to work -->
            <args_sorting>true</args_sorting> <!--  Optional
                                                    Default value: false
                                                    Allowed values: true, false
                                                    Other values: default value
                                                    It makes a PARTIAL sorting: when combining elements, 
                                                        elements of the same type will be group depending 
                                                        on the element that first was parsed.
                                                        Example:
                                                        element1 | list1 | element2 | dict1 | list2
                                                        Without partial sorting:
                                                        dict1 | list1 | list2 | element1 element2
                                                        With partial sorting:
                                                        element1 | element2 | list1 | list2 | dict1
                                                    If you want the elements totally sorted combining them:
                                                        combine elements, enable this option and write the
                                                        elements without jumps (first all the "dict", "list"
                                                        or "element" elements, ...) -->
            <args>  <!--    Mandatory
                            If you use 'list', 'dict' and 'element' in combination at the same deepness, the result will not be sorted in the same way you wrote the rules
                            If you no use these elements in combination, the result will be sorted
                            Default sorting: 1st dicts; 2nd lists; 3rd elements -->
                <dict>  <!--    Optional
                                *** Mandatory and unique element as first arg ***
                                Mandatory 'name' attribute in childs -->
                    <element name="var1" value="val1" />    <!-- Mandatory 'value' attribute -->
                    <element name="var2" value="val2" />

                    <list name="list1">  <!-- Optional -->
                        <element value="list1_val1" />  <!-- 'name' attribute only is mandatory if direct parent is a 'dict' -->
                        <element value="list1_val2" />
                    </list>

                    <dict name="dict">
                        <list name="list2">
                            <element value="list2_val1" />
                        </list>
                    </dict>

                    <list name="list3">
                        <element value="list3_val1" />
                        
                        <list>
                            <element value="list_val1" />

                            <dict>
                                <dict name="dict">
                                    <element name="var1" value="val1" />
                                </dict>
                            </dict>
                        </list>

                        <element value="list3_val2" />
                    </list>
                </dict>
            </args>
        </module>
        <module>
            <module_name>Other module</module_name>
            <class_name>Other class</class_name>
            <args>
                <dict>
                    <element name="dict_element" value="dict_value" />

                    <list name="dict_list_element">
                        <element value="list_element" />
                        
                        <list>
                            <list>

                            </list>
                            <dict>

                            </dict>
                        </list>
                    </list>
                </dict>
            </args>
        </module>
        <module>
            <module_name>Other module with args_sorting</module_name>
            <class_name>Other class with args_sorting</class_name>
            <args_sorting>true</args_sorting>
            <args>
                <dict>
                    <element name="dict_element" value="dict_value" />

                    <list name="dict_list_element">
                        <element value="list_element" />
                        
                        <list>
                            <list>

                            </list>
                            <dict>

                            </dict>
                        </list>
                    </list>
                </dict>
            </args>
        </module>
    </modules>
</boa_rules>